<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<title>tw list auto checker</title>
<script src="jquery-3.4.1.js"></script>
<script>
/**
 * チェック状態
 * 配列分はリスト、連想配列分は"<%= AppConst.MT %>"、"<%= AppConst.RT %>"、"<%= AppConst.FOLLOW %>"。
 * 連想配列分はリセット手段が共通のため、"<%= AppConst.MT %>"にだけリセットがある。
 * 下記のプロパティは全ての要素に常にあるわけではない。
 * @property {string}  unread - 0～9(未読数)、*(未読数が9を超える)、制御値
 * @property {string}  lastReadTweetId - 最新既読tweetId
 * @property {string}  tweetIdNext - 最新未読tweetId　→　使わなくなったが使えるように残す(未読オーバーするとチェックしなくなるため未読最新でなくなってしまう)
 * @property {string}  overview - 最新未読tweetText　→　tweetIdNext関連であまりあてにならない
 * @property {string}  reset - 未読リセット要求
 * @property {string}  lastFollowerId - 最新フォロワーID
 */
var Target;

/**
 * ターゲットタイプの配列
 * 順、アクセス制限値等。
 * 各要素の下記のプロパティは全ての要素に常にあるわけではない。
 * @property {string}  type - "<%= AppConst.LIST %>"か"<%= AppConst.MT %>"か""<%= AppConst.RT %>"か"<%= AppConst.FOLLOW %>"
 * @property {string}  limit - アクセス制限値(何秒の1回がセーフペースか)
 * @property {string}  lastCheckTime - 前回のチェック時間
 * @property {string}  index - "<%= AppConst.LIST %>"の場合に次にチェックするターゲット
 */
 var TargetType;

/**
 * デバッグモード
 * クライアントでデバッグしやすくするため
 * @static
 */
var Debug;

/**
 * タイトル内の"<%= AppConst.MT %>"、"<%= AppConst.RT %>"、"<%= AppConst.FOLLOW %>"の位置
 * @static
 */
var NotificationsOrder;

/**
 * デバッグ動作ラッパー
 * @constructor
 * @param {string} str デバッグ出力文字列
 */
function DEBUG(str)
{
    //デバッグモードか
    if (Debug == "<%= AppConst.ON %>")
    {
        console.debug("[DEBUG]" + str);
    }

    return;
}

/**
 * 致命的エラーで終了
 * エラー情報を出力して終了する。
 * (throwでお試し)
 * @constructor
 * @param {string} func 関数名
 * @param {object} errorInfo エラー情報
 */
function fatal(func, errorInfo)
{
    console.error("function:" + func);
    console.error(errorInfo);
    throw arguments.callee.name;
}

/**
 * ajaxのクエリを作成する。
 * 要素の増減等に対応しやすくすることを考慮している。
 * @constructor
 * @param {number} index ターゲットタイプのインデックス
 * @returns {string} 作成したajaxクエリ
 */
function makeQuery(index)
{
    let ret = "?";
    let query = {};

    //indexが無効か
    if (!TargetType.hasOwnProperty(index))
    {
        //機能的には起こらない
        fatal(arguments.callee.name, index);
    }

    //ターゲットタイプがリストか
    if (TargetType[index].type == "<%= AppConst.LIST %>")
    {//である
        query["<%= Setting.checkIf.req.index %>"] = TargetType[index].index;
    }
    //ターゲットタイプがあるか
    else if (NotificationsOrder.hasOwnProperty(TargetType[index].type))
    {//ある
        query["<%= Setting.checkIf.req.index %>"] = TargetType[index].type;
    }
    else
    {//ない
        //機能的には起こらない
        fatal(arguments.callee.name, TargetType[index].type);
    }

    //未読数取得
    let unread = getUnreadByTargetTypeIndex(index, "<%= AppConst.ON %>");

    //初回か
    if (unread == "")
    {//である
        query["<%= Setting.checkIf.req.first %>"] = "<%= AppConst.ON %>"
    }
    //リセットか
    else if (unread == "?")
    {//である
        query["<%= Setting.checkIf.req.first %>"] = "<%= AppConst.ON %>"
    }
    else
    {//ではない
        query["<%= Setting.checkIf.req.first %>"] = "<%= AppConst.OFF %>"
    }

    //全要素を連結するループ
    for (let key of Object.keys(query))
    {
        ret += key + "=" + query[key] + "&";
    }

    ret = ret.substr(0, ret.length - 1);
    return ret;
}

/**
 * ターゲットインデックスから未読数を取得する。
 * エラーの場合は「E」、リセットの場合は「R」になる。
 * 両方の場合は「R」になる。
 * rawSwitchが"<%= AppConst.ON %>"の場合は上記を行わない。
 * @constructor
 * @param {object} index ターゲットのインデックス
 * @param {string} rawSwitch "<%= AppConst.ON %>"か"<%= AppConst.OFF %>"(省略時)
 * @returns {string} 未読数
 */
 function getUnreadByTargetIndex(index, rawSwitch = "<%= AppConst.OFF %>")
{
    let ret;

    //indexが無効か
    if (!Target.hasOwnProperty(index))
    {
        //機能的には起こらない
        fatal(arguments.callee.name, index);
    }

    ret = Target[index].unread;

    //ロースイッチが"<%= AppConst.OFF %>"か
    if (rawSwitch == "<%= AppConst.OFF %>")
    {
        //ターゲットがリストか
        if (!isNaN(index))
        {//である
            //リセットか
            if (Target[index].reset == "<%= AppConst.ON %>")
            {
                ret = "R";
            }
            //エラーか
            else if (Target[index].error == "<%= AppConst.ON %>")
            {
                ret = "E";
            }
        }
        //ターゲットがあるか
        else if (NotificationsOrder.hasOwnProperty(index))
        {//ある
            //リセットか
            if (Target["<%= AppConst.MT %>"].reset == "<%= AppConst.ON %>")
            {
                ret = "R";
            }
            //エラーか
            else if (Target[index].error == "<%= AppConst.ON %>")
            {
                ret = "E";
            }
        }
    }

    return ret;
}

/**
 * ターゲットタイプインデックスから未読数を取得する。
 * エラーの場合は「E」、リセットの場合は「R」になる。
 * 両方の場合は「R」になる。
 * rawSwitchが"<%= AppConst.ON %>"の場合は上記を行わない。
 * @constructor
 * @param {number} index ターゲットタイプのインデックス
 * @param {string} rawSwitch "<%= AppConst.ON %>"か"<%= AppConst.OFF %>"(省略時)
 * @returns {string} 未読数
 */
 //#
function getUnreadByTargetTypeIndex(index, rawSwitch = "<%= AppConst.OFF %>")
{
    //indexが無効か
    if (!TargetType.hasOwnProperty(index))
    {
        //機能的には起こらない
        fatal(arguments.callee.name, index);
    }

    //ターゲットタイプがリストか
    if (TargetType[index].type == "<%= AppConst.LIST %>")
    {//である
        ret = getUnreadByTargetIndex(TargetType[index].index, rawSwitch);
    }
    //ターゲットタイプがあるか
    else if (NotificationsOrder.hasOwnProperty(TargetType[index].type))
    {//ある
        ret = getUnreadByTargetIndex(TargetType[index].type, rawSwitch);
    }
    else
    {//ない
        //機能的には起こらない
        fatal(arguments.callee.name, TargetType[index].type);
    }

    return ret;
}

/**
 * タイトルにターゲットインデックスで指定されたターゲットのチェック状況を表示する。
 * 区切り文字があることを考慮している。
 * @constructor
 * @param {object} index ターゲットのインデックス
 */
 function setTitleByTargetIndex(index)
{
    let arrayTitle = Array.from($("title").text());

    //indexが無効か
    if (!Target.hasOwnProperty(index))
    {
        //機能的には起こらない
        fatal(arguments.callee.name, index);
    }

    //未読数取得
    let char = getUnreadByTargetIndex(index);

    //ターゲットがリストか
    if (!isNaN(index))
    {//である
        let count = index * 1 + 1;
        let tmpIndex = count + Math.floor(count / 4) - (count % 4 == 0 ? 1 : 0);
        arrayTitle[tmpIndex - 1] = char;
    }
    else
    {//ではない
        arrayTitle[arrayTitle.length + NotificationsOrder[index]] = char;
    }

    $("title").text(arrayTitle.join(""));
    return;
}

/**
 * タイトルにターゲットタイプインデックスで指定されたターゲットのチェック状況を表示する。
 * ターゲットタイプがリストの場合は現在のリストのインデックスが対象となる。
 * 区切り文字があることを考慮している。
 * @constructor
 * @param {number} index ターゲットタイプのインデックス
 */
function setTitleByTargetTypeIndex(index)
{
    //indexが無効か
    if (!TargetType.hasOwnProperty(index))
    {
        //機能的には起こらない
        fatal(arguments.callee.name, index);
    }

    //ターゲットタイプがリストか
    if (TargetType[index].type == "<%= AppConst.LIST %>")
    {//である
        setTitleByTargetIndex(TargetType[index].index);
    }
    //ターゲットタイプがあるか
    else if (NotificationsOrder.hasOwnProperty(TargetType[index].type))
    {//ではない
        setTitleByTargetIndex(TargetType[index].type);
    }
    else
    {//ない
        //機能的には起こらない
        fatal(arguments.callee.name, TargetType[index].type);
    }

    return;
}

/**
 * tableタグにチェック状況を表示する。
 * ターゲットタイプがリストの場合は現在のインデックスが対象となる。
 * @constructor
 * @param {number} index ターゲットタイプのインデックス
 */
function setTableTag(index)
{
    //indexが無効か
    if (!TargetType.hasOwnProperty(index))
    {
        //機能的には起こらない
        fatal(arguments.callee.name, index);
    }

    //ターゲットタイプがリストか
    if (TargetType[index].type == "<%= AppConst.LIST %>")
    {//である
        $("#list_" + TargetType[index].index + "_Unread").html("<b>" + Target[TargetType[index].index].unread + "</b>");
        $("#list_" + TargetType[index].index + "_Overview").html(Target[TargetType[index].index].overview);
    }
    //ターゲットタイプがあるか
    else if (NotificationsOrder.hasOwnProperty(TargetType[index].type))
    {//ある
        $("#list_" + TargetType[index].type + "_Unread").html("<b>" + Target[TargetType[index].type].unread + "</b>");
    }
    else
    {//ない
        //機能的には起こらない
        fatal(arguments.callee.name, TargetType[index].type);
    }

    return;
}

/**
 * indexがリストの場合に数値に変換
 * @constructor
 * @param {string} index ターゲット
 * @returns {number} indexの数値
 */
function convertForList(index)
{
    let ret = parseInt(index);

    //数値に変換できないか
    if (isNaN(ret))
    {
        ret = index;
    }

    return ret;
}

/**
 * チェック状態を格納する。(初回)
 * @constructor
 * @param {object} resIndex ターゲット
 * @param {object} resData レスポンスデータ
 */
function setDataFirst(resIndex, resData)
{
    Target[resIndex].unread = "0";
    $("#list_" + resIndex + "_Unread").html(Target[resIndex].unread);

    //ターゲットがリストか
    if (!isNaN(resIndex))
    {//である
        DEBUG("resData.length:" + resData.length);

        //Tweetがあるか
        if (resData.length == 1)
        {
            Target[resIndex].lastReadTweetId = resData[0].<%= Setting.checkIf.res.list.tweedId %>;
            Target[resIndex].overview = resData[0].<%= Setting.checkIf.res.list.overview %>;
            $("#list_" + resIndex + "_Overview").html(Target[resIndex].overview);
        }
    }
    else
    {//ではない
        //ターゲットで分岐
        switch (resIndex)
        {
            case "<%= AppConst.MT %>":
            {//返信
                Target[resIndex].lastReadTweetId = resData[0].<%= Setting.checkIf.res.mt.tweedId %>;
                break;
            }
            case "<%= AppConst.RT %>":
            {//RT
                Target[resIndex].lastReadTweetId = resData[0].<%= Setting.checkIf.res.rt.tweedId %>;
                Target[resIndex].rtCount = resData[0].<%= Setting.checkIf.res.rt.rtCount %>;
                break;
            }
            case "<%= AppConst.FOLLOW %>":
            {//フォロー
                Target[resIndex].follower = resData;
                break;
            }
            default:
            {//他
                //機能的には起こらない
                fatal(arguments.callee.name, resIndex);
                break;
            }
        }
    }

    return;
}

/**
 * チェック状態を格納する。(初回後)
 * @constructor
 * @param {object} resIndex ターゲット
 * @param {object} resTweet レスポンスデータ
 */
function setDataNext(resIndex, resData)
{
    let unread = 0;
    Target[resIndex].unread = "before check";

    //ターゲットがリストか
    if (!isNaN(resIndex))
    {//である
        //APIが戻したTweetをチェックするループ
        for (let index = 0; index < resData.length; index++)
        {
            //最新のTweetか
            if (index == 0)
            {
                $("#list_" + resIndex + "_Overview").html(resData[index].<%= Setting.checkIf.res.list.overview %>);
            }

            //既読TweetがAPIが戻したTweetにあったか
            if (resData[index].<%= Setting.checkIf.res.list.tweedId %> == Target[resIndex].lastReadTweetId)
            {
                Target[resIndex].unread = unread + "";
                DEBUG("unread count: " + Target[resIndex].unread);
                break;
            }

            unread++;
        }
    }
    else
    {//ではない
        //ターゲットで分岐
        switch (resIndex)
        {
            case "<%= AppConst.MT %>":
            {//返信
                //APIが戻したTweetをチェックするループ
                for (let index = 0; index < resData.length; index++)
                {
                    //既読TweetがAPIが戻したTweetにあったか
                    if (resData[index].<%= Setting.checkIf.res.mt.tweedId %> == Target[resIndex].lastReadTweetId)
                    {
                        Target[resIndex].unread = unread + "";
                        DEBUG("unread count: " + Target[resIndex].unread);
                        break;
                    }

                    unread++;
                }

                break;
            }
            case "<%= AppConst.RT %>":
            {//RT
                //APIが戻したTweetをチェックするループ
                for (let index = 0; index < resData.length; index++)
                {
                    //既読TweetがAPIが戻したTweetにあったか
                    if ((resData[index].<%= Setting.checkIf.res.rt.tweedId %> == Target[resIndex].lastReadTweetId) &&
                         (resData[index].<%= Setting.checkIf.res.rt.rtCount %> == Target[resIndex].rtCount))
                    {
                        Target[resIndex].unread = unread + "";
                        DEBUG("unread count: " + Target[resIndex].unread);
                        break;
                    }

                    unread++;
                }

                break;
            }
            case "<%= AppConst.FOLLOW %>":
            {//フォロー
                //APIが戻したフォロワーをチェックするループ
                for (let index = 0; index < resData.length; index++)
                {
                    //フォロワーが前回に含まれていないか
                    if (!Target[resIndex].follower.includes(resData[index]))
                    {
                        unread++;
                    }

                    //未読オーバーではないか
                    if (unread <= 9)
                    {
                        Target[resIndex].unread = unread + "";
                    }
                }

                //未読オーバーではないか
                if (Target[resIndex].unread != "before check")
                {
                    DEBUG("unread count: " + Target[resIndex].unread);
                }

                break;
            }
            default:
            {//他
                //機能的には起こらない
                fatal(arguments.callee.name, resIndex);
                break;
            }
        }
    }

    //既読Tweetがなかった(=未読数が10以上)か
    if (Target[resIndex].unread == "before check")
    {
        Target[resIndex].unread = "*";
        DEBUG("unread over index: " + resIndex);
    }

    let html = Target[resIndex].unread;

    //未読があるか
    if (html != "0")
    {
        html = "<b>" + html + "</b>";
    }

    $("#list_" + resIndex + "_Unread").html(html);
    return;
}

/**
 * ajaxのレスポンスを解析する。
 * @constructor
 * @param {object} ajaxRes ajaxのレスポンス
 */
function analyzeRes(ajaxRes)
{
    let res = JSON.parse(ajaxRes);

    //リスト分を数値に変換
    res.<%= Setting.checkIf.res.index %> = convertForList(res.<%= Setting.checkIf.res.index %>);

    let resIndex = res.<%= Setting.checkIf.res.index %>;
    let resResult = res.<%= Setting.checkIf.res.result %>;
    let resData = res.<%= Setting.checkIf.res.data %>;
    DEBUG("from node.js: " + [resIndex, resResult, resData.length].join(","));

    //未読数取得
    let unread = Target[resIndex].unread;

    //successか
    if (resResult == "<%= AppConst.SUCCESS %>")
    {//successである
        //初回か
        if (unread == "")
        {//初回である
            //初回データ格納
            setDataFirst(resIndex, resData);
        }
        //リセットか
        else if (unread == "?")
        {
            //リセットデータ格納(初回と同じ)
            setDataFirst(resIndex, resData);
        }
        else
        {//他
            //初回後データ格納
            setDataNext(resIndex, resData);
        }

        Target[resIndex].error = "<%= AppConst.OFF %>";
        $("#list_" + resIndex + "_Error").html("");
    }
    else
    {//successではない
        console.error(resData);
        Target[resIndex].error = "<%= AppConst.ON %>";
        $("#list_" + resIndex + "_Error").html(resData);
    }

    //タイトルにチェック状況表示
    setTitleByTargetIndex(resIndex);

    return;
}

/**
 * ajaxを呼び出す。
 * 同期化している。
 * @constructor
 * @param {string} url ajaxのアクセス先
 * @returns {Promise} インスタンス
 */
function syncAjax(url)
{
    return new Promise(
        /**
         * ajaxを呼び出す。
         * 同期化を考慮している。
         * (待たせる方)
         * @param resolve 成功コールバック
         * @param reject 失敗コールバック
         */
        function(resolve, reject)
        {
            $.ajax(
                {
                    url: url,
                    error:
                        /**
                        * ajaxのerrorコールバック
                        * @param {jqXHR} jqXHR ajaxから引用
                        * @param {string} textStatus ajaxから引用
                        * @param {string} errorThrown ajaxから引用
                        */
                        function(jqXHR, textStatus, errorThrown)
                        {
                            console.error("ERROR:" + url);
                            console.error(jqXHR);
                            console.error(textStatus);
                            console.error(errorThrown);
                        },
                    success:
                        /**
                        * ajaxのsuccessコールバック
                        * @param {object} data ajaxから引用
                        */
                        function(data)
                        {
                            DEBUG("ajax success");
                            resolve(data);
                        }
                });
        });
}

/**
 * ajaxを呼び出す。
 * 同期化している。
 * @constructor
 * @param {number} index ターゲットタイプのインデックス
 */
async function callAjax(index)
{
    //ajaxクエリ作成
    let query = makeQuery(index);

    let url = "<%= Setting.nodejs.urlBase %>" + ":" + "<%= Setting.nodejs.port %>" + "<%= Setting.nodejs.urlCheck %>";
    url += query;
    DEBUG("ajax: " + url);
    $("#status").attr("value", (TargetType[index].type == "<%= AppConst.LIST %>" ? TargetType[index].index : TargetType[index].type) + " チェック中");

    //同期ajax
    let ajaxRes = await syncAjax(url);

    $("#status").attr("value", "未通信");

    //ajaxのレスポンス解析
    analyzeRes(ajaxRes);

    return;
}

/**
 * アクセス制限中か判断する。
 * @constructor
 * @param {number} index ターゲットタイプのインデックス
 * @returns {bool} 判断結果(true:いずれアクセス制限される等からアクセスすべきではない、false:それ以外))
 */
function isAccessLimit(index)
{
    let ret = false;
    let now = Date.now();

    //ターゲットタイプがリストか
    if (TargetType[index].type == "<%= AppConst.LIST %>")
    {//である
        //既にリストを呼び出し済みか、制限されるペースか
        if (now - TargetType[index].lastCheckTime <= TargetType[index].limit * 1000)
        {
            ret = true;
        }
    }
    else
    {//ではない
        //ターゲットタイプがあるか
        if (NotificationsOrder.hasOwnProperty(TargetType[index].type))
        {//ある
            //制限されるペースか
            if (now - TargetType[index].lastCheckTime <= TargetType[index].limit * 1000)
            {
                ret = true;
            }
        }
        else
        {//ない
            //機能的には起こらない
            fatal(arguments.callee.name, TargetType[index].type);
        }
    }

    return ret;
}

/**
 * リセット状態を取得する。
 * ターゲットタイプがリストの場合は現在のリストのインデックスが対象となる。
 * @constructor
 * @param {number} index ターゲットタイプのインデックス
 * @returns {string} "<%= AppConst.ON %>" or "<%= AppConst.OFF %>"
 */
function getReset(index)
{
    let ret;

    //ターゲットタイプがリストか
    if (TargetType[index].type == "<%= AppConst.LIST %>")
    {//である
        ret = Target[TargetType[index].index].reset;
    }
    //ターゲットタイプがあるか
    else if (NotificationsOrder.hasOwnProperty(TargetType[index].type))
    {//ある
        ret = Target[TargetType[index].type].reset;
    }
    else
    {//ない
        //機能的には起こらない
        fatal(arguments.callee.name, TargetType[index].type);
    }

    return ret;
}

/**
 * リセットする。
 * ターゲットタイプがリストの場合は現在のリストのインデックスが対象となる。
 * @constructor
 * @param {number} index ターゲットタイプのインデックス
 */
function clearReset(index)
{
    //ターゲットタイプがリストか
    if (TargetType[index].type == "<%= AppConst.LIST %>")
    {//である
        Target[TargetType[index].index].reset = "<%= AppConst.OFF %>";
        Target[TargetType[index].index].unread = "?";
        Target[TargetType[index].index].overview = "";
        $("#list_" + TargetType[index].index + "_Reset").html("");
    }
    //ターゲットタイプがあるか
    else if (NotificationsOrder.hasOwnProperty(TargetType[index].type))
    {//ある
        Target[TargetType[index].type].reset = "<%= AppConst.OFF %>";
        Target[TargetType[index].type].unread = "?";
        $("#list_" + TargetType[index].type + "_Reset").html("");
    }
    else
    {//ない
        //機能的には起こらない
        fatal(arguments.callee.name, TargetType[index].type);
    }

    return;
}

/**
 * ajaxを使用して解析を行う。
 * @constructor
 */
async function check()
{
    let tmpTitle = $("title").text();
    $("title").text(tmpTitle.includes("=") ? tmpTitle.replace("=", "-") : tmpTitle.replace("-", "="));

    //画面でチェック停止されていないか
    if (!$("#ctrl").prop("checked"))
    {
        //全ターゲットタイプのループ
        for (let index = 0; index < TargetType.length; index++)
        {
            //アクセス制限判定
            let tmpIsAccessLimit = isAccessLimit(index);

            //アクセス制限になりえるか
            if (tmpIsAccessLimit)
            {
                continue;
            }

            //リセット状態取得
            let reset = getReset(index);

            //リセットされているか
            if (reset == "<%= AppConst.ON %>")
            {
                //リセット
                clearReset(index);

                //tableタグにチェック状況表示
                setTableTag(index);

                //タイトルにチェック状況表示
                setTitleByTargetTypeIndex(index);
            }

            //未読数取得
            let tmpUnread = getUnreadByTargetTypeIndex(index, "<%= AppConst.ON %>");

            //初回か、チェック有効(=未読オーバーではない)か、リセットであるか
            if ((((tmpUnread >= 0) && (tmpUnread <= 9))) || (tmpUnread == "") || (tmpUnread == "?"))
            {
                TargetType[index].lastCheckTime = Date.now();

                //同期式でajaxを使ってチェック
                await callAjax(index);

                let tmpDate = new Date();
                $("#lastcheck").attr("value", tmpDate.toLocaleString());
            }

            //ターゲットがリストか
            if (TargetType[index].type == "<%= AppConst.LIST %>")
            {
                TargetType[index].index = (TargetType[index].index + 1) % <%= List.length %>;
            }
        }
    }

    setTimeout(check, 2000);
    return;
}

/**
 * 未読をリセットする。
 * @constructor
 * @param {string} index 未読をリセットするターゲット
 */
function resetUnread(index)
{
    //ターゲットがリストか
    if (!isNaN(index))
    {//である
        Target[index].reset = "<%= AppConst.ON %>";
        $("#list_" + index + "_Reset").html("<b><%= AppConst.ON %></b>");
        setTitleByTargetIndex(index);
        DEBUG("unread reset index: " + index);
    }
    //ターゲットが通知か
    //　通知のリセットは手段が同じため"<%= AppConst.MT %>"に集約する。
    else if (index == "notifications")
    {//である
        Target["<%= AppConst.MT %>"].reset = "<%= AppConst.ON %>";
        Target["<%= AppConst.RT %>"].reset = "<%= AppConst.ON %>";
        Target["<%= AppConst.FOLLOW %>"].reset = "<%= AppConst.ON %>";
        $("#list_<%= AppConst.MT %>_Reset").html("<b><%= AppConst.ON %></b>");
        $("#list_<%= AppConst.RT %>_Reset").html("<b><%= AppConst.ON %></b>");
        $("#list_<%= AppConst.FOLLOW %>_Reset").html("<b><%= AppConst.ON %></b>");
        setTitleByTargetIndex("<%= AppConst.MT %>");
        setTitleByTargetIndex("<%= AppConst.RT %>");
        setTitleByTargetIndex("<%= AppConst.FOLLOW %>");
        DEBUG("unread reset notifications");
    }
    else
    {//他
        //機能的には起こらない
        fatal(arguments.callee.name, index);
    }

    return;
}

/**
 * 初期表示のタイトル文字列を作成する。
 * 視認性を上げるために区切りを入れることを考慮している。
 * @constructor
 * @param {string} listLength リスト数
 * @param {string} notificationsOrderLength 通知数
 * @returns {string} 初期表示のタイトル文字列
 */
function makeInitTitle(listLength, notificationsOrderLength)
{
    let tmpListLength;

    //リスト分
    tmpListLength = listLength + Math.floor(listLength / 4) - (listLength % 4 == 0 ? 1 : 0);　

    //「:」分
    tmpListLength += 1;　

    //"<%= AppConst.MT %>"、"<%= AppConst.RT %>"、"<%= AppConst.FOLLOW %>"分
    tmpListLength += notificationsOrderLength;　

    let tmpStr = "?".repeat(tmpListLength);
    let arrayStr = Array.from(tmpStr);

    //区切りを入れるループ
    for (let index = 4; index < listLength; index += 5)
    {
        arrayStr[index] = " ";
    }

    arrayStr[arrayStr.length - 1 - notificationsOrderLength] = ":";
    let ret = arrayStr.join("");
    return ret;
}

/**
 * 初期化
 * @constructor
 */
function initialize()
{
    Debug = "<%= Setting.debug %>";
    Target = [];

    open($("a#notifications_Url").text(), "tw_list_auto_checker_notiications");

    //リストごとの初期化を行うループ
    for (let index = 0; index < <%= List.length %>; index++)
    {
        Target.push(
            {
                unread: "",
                lastReadTweetId: "",
                tweetIdNext: "",
                overview: "",
                reset: "<%= AppConst.OFF %>",
                error: "<%= AppConst.OFF %>"
            });
        open($("a#list_" + index + "_Url").text(), "tw_list_auto_checker_" + index);
    }

    Target["<%= AppConst.MT %>"] =
        {
            unread: "",
            reset: "<%= AppConst.OFF %>",
            lastReadTweetId: "",
            error: "<%= AppConst.OFF %>"
        };
    Target["<%= AppConst.RT %>"] =
        {
            unread: "",
            reset: "<%= AppConst.OFF %>",
            lastReadTweetId: "",
            rtCount: "",
            error: "<%= AppConst.OFF %>"
        };
    Target["<%= AppConst.FOLLOW %>"] =
        {
            unread: "",
            reset: "<%= AppConst.OFF %>",
            follower: [],
            error: "<%= AppConst.OFF %>"
        };
    let tmpNotificationsOrder = <%- Setting.notificationsOrder %>;
    NotificationsOrder = {};

    //リスト以外のターゲットのタイトル位置を格納するループ
    for (let index = 0; index < tmpNotificationsOrder.length; index++)
    {
        NotificationsOrder[tmpNotificationsOrder[index]] = (tmpNotificationsOrder.length - index) * (-1);
    }

    TargetType = [];

    //リストがあるか
    if (<%= List.length %> > 0)
    {
        TargetType.push(
            {
                type: "<%= AppConst.LIST %>",
                limit: <%= Setting.urlTwitterApi.list.limit %>,
                lastCheckTime: 0,
                index: 0
            });
    }

    //ターゲットタイプに通知分を格納するループ
    for (let index in tmpNotificationsOrder)
    {
        let target =
            {
                type: tmpNotificationsOrder[index],
                lastCheckTime: 0
            };

        //ターゲットタイプで分岐
        switch (tmpNotificationsOrder[index])
        {
            case "<%= AppConst.MT %>":
            {//返信
                target.limit = <%= Setting.urlTwitterApi.mt.limit %>;
                break;
            }
            case "<%= AppConst.RT %>":
            {//RT
                target.limit = <%= Setting.urlTwitterApi.rt.limit %>;
                break;
            }
            case "<%= AppConst.FOLLOW %>":
            {//フォロー
                target.limit = <%= Setting.urlTwitterApi.follow.limit %>;
                break;
            }
            default:
            {//他
                //機能的には起こらない
                fatal(arguments.callee.name, tmpNotificationsOrder[index]);
                break;
            }
        }

        TargetType.push(target);
    }

    //区切りが入った未読数を表すタイトル作成
    let initTitle = makeInitTitle(<%= List.length %>, tmpNotificationsOrder.length);

    $("title").text(initTitle);
    setTimeout(check, 10000);
    $("title").text($("title").text().replace(":", "-"));
    return;
}
</script>
</head>
<body>
<style>
table { border: 1px solid black; }
td
{
    white-space:nowrap;
    border: 1px solid black;
}
.bg_gray { background-color:gray; }
.bg_white { background-color:white; }
.bg_silver { background-color:silver; }
.bg_lsb { background-color:lightskyblue; }
</style>
<form>
    チェック停止<input type="checkbox" id="ctrl"><br>
    状態<input id="status" type="text" value="未通信" readonly>　最終チェック日時<input id="lastcheck" type="text" value="" size="20" readonly>
</form>
<table>
    <tr class="bg_lsb">
        <td>ターゲット</td>
        <td>未読数</td>
        <td>リセット</td>
        <td>通称</td>
        <td>URL</td>
        <td>エラー</td>
        <td hidden>チェック日時</td>
        <td hidden>最新概要</td>
    </tr>
<%
for (var i = 0; i < List.length; i++)
{
%>
<%
    if (i % 2 == 0)
    {
%>
    <!--視認性を上げるために縞にする-->
    <tr class="bg_white">
<%
    }
    else
    {
%>
    <tr class="bg_silver">
<%
    }
%>
        <td><%= i %></td>
        <td id="list_<%= i %>_Unread"></td>
        <td id="list_<%= i %>_Reset"></td>
        <td><%= List[i].alias %></td>
        <td><a id="list_<%= i %>_Url" href="<%= List[i].url %>" target="tw_list_auto_checker_<%= i %>" onclick="resetUnread(<%= i %>);"><%= List[i].url %></a></td>
        <td id="list_<%= i %>_Error"></td>
        <td id="list_<%= i %>_CheckDatetime" hidden></td>
        <td id="list_<%= i %>_Overview" hidden></td>
    </tr>
<%
    if (i % 4 == 3)
    {
%>
    <!--視認性を上げるために区切りを入れる-->
    <tr></tr><tr></tr>
<%
    }
}
%>
    <tr></tr><tr></tr>
    <tr>
        <td><%= AppConst.MT %></td>
        <td id="list_<%= AppConst.MT %>_Unread"></td>
        <td id="list_<%= AppConst.MT %>_Reset"></td>
        <td>返信</td>
        <td><a id="notifications_Url" href="https://twitter.com/notifications" target="tw_list_auto_checker_notiications" onclick="resetUnread('notifications');">https://twitter.com/notifications</a></td>
        <td id="list_<%= AppConst.MT %>_Error"></td>
        <td id="list_<%= AppConst.MT %>_CheckDatetime" hidden></td>
        <td id="list_<%= AppConst.MT %>_Overview" hidden></td>
    </tr>
    <tr>
        <td><%= AppConst.RT %></td>
        <td id="list_<%= AppConst.RT %>_Unread"></td>
        <td id="list_<%= AppConst.RT %>_Reset"></td>
        <td>RT</td>
        <td class="bg_gray"></td>
        <td id="list_<%= AppConst.RT %>_Error"></td>
        <td id="list_<%= AppConst.RT %>_CheckDatetime" hidden></td>
        <td id="list_<%= AppConst.RT %>_Overview" hidden></td>
    </tr>
    <tr>
        <td><%= AppConst.FOLLOW %></td>
        <td id="list_<%= AppConst.FOLLOW %>_Unread"></td>
        <td id="list_<%= AppConst.FOLLOW %>_Reset"></td>
        <td>フォロー</td>
        <td class="bg_gray"></td>
        <td id="list_<%= AppConst.FOLLOW %>_Error"></td>
        <td id="list_<%= AppConst.FOLLOW %>_CheckDatetime" hidden></td>
        <td id="list_<%= AppConst.FOLLOW %>_Overview" hidden></td>
    </tr>
</table>
エラー詳細
<a href="https://developer.twitter.com/en/docs/basics/response-codes" target="error">https://developer.twitter.com/en/docs/basics/response-codes</a>
<script>
//初期化
initialize();
</script>
</body>
</html>
